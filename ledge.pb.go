// Code generated by protoc-gen-go.
// source: ledge.proto
// DO NOT EDIT!

/*
Package ledge is a generated protocol buffer package.

It is generated from these files:
	ledge.proto

It has these top-level messages:
	ProtoEntry
*/
package ledge

import proto "github.com/golang/protobuf/proto"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal

type Level int32

const (
	Level_NONE  Level = 0
	Level_DEBUG Level = 1
	Level_INFO  Level = 2
	Level_WARN  Level = 3
	Level_ERROR Level = 4
	Level_FATAL Level = 5
	Level_PANIC Level = 6
)

var Level_name = map[int32]string{
	0: "NONE",
	1: "DEBUG",
	2: "INFO",
	3: "WARN",
	4: "ERROR",
	5: "FATAL",
	6: "PANIC",
}
var Level_value = map[string]int32{
	"NONE":  0,
	"DEBUG": 1,
	"INFO":  2,
	"WARN":  3,
	"ERROR": 4,
	"FATAL": 5,
	"PANIC": 6,
}

func (x Level) String() string {
	return proto.EnumName(Level_name, int32(x))
}

type ProtoEntry struct {
	Id                   string            `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	TimeUnixNsec         uint64            `protobuf:"varint,2,opt,name=time_unix_nsec" json:"time_unix_nsec,omitempty"`
	ContextTypeToContext map[string][]byte `protobuf:"bytes,3,rep,name=context_type_to_context" json:"context_type_to_context,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value,proto3"`
	EventType            string            `protobuf:"bytes,4,opt,name=event_type" json:"event_type,omitempty"`
	Event                []byte            `protobuf:"bytes,5,opt,name=event,proto3" json:"event,omitempty"`
	WriterOutput         []byte            `protobuf:"bytes,6,opt,name=writer_output,proto3" json:"writer_output,omitempty"`
}

func (m *ProtoEntry) Reset()         { *m = ProtoEntry{} }
func (m *ProtoEntry) String() string { return proto.CompactTextString(m) }
func (*ProtoEntry) ProtoMessage()    {}

func (m *ProtoEntry) GetContextTypeToContext() map[string][]byte {
	if m != nil {
		return m.ContextTypeToContext
	}
	return nil
}

func init() {
	proto.RegisterEnum("ledge.Level", Level_name, Level_value)
}
